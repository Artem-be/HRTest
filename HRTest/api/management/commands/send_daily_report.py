from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
import requests
import logging
import os

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'

    def add_arguments(self, parser):
        parser.add_argument(
            '--bot-token',
            type=str,
            help='Telegram Bot Token'
        )
        parser.add_argument(
            '--admin-id',
            type=int,
            help='Admin Telegram ID'
        )

    def handle(self, *args, **options):
        try:
            from ..models import UserActivity
            
            yesterday = timezone.now() - timedelta(days=1)
            
            unique_users = UserActivity.objects.filter(
                timestamp__gte=yesterday
            ).values('user_id').distinct().count()
            
            report_text = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç\n\n–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—É—Ç–∫–∏ –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å {unique_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            bot_token = options['bot_token'] or os.getenv('BOT_TOKEN')
            admin_id = options['admin_id'] or int(os.getenv('ADMIN_ID', '123456789'))
            
            if not bot_token:
                self.stdout.write(
                    self.style.ERROR('–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN')
                )
                return
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                'chat_id': admin_id,
                'text': report_text
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {unique_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                )
                logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {unique_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}')
                )
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {response.status_code}")
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {e}") 