from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardMarkup
import asyncio
import aiohttp
import os
import logging
import random
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logging.getLogger('aiogram').setLevel(logging.WARNING)

API_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
DJANGO_API_URL = os.getenv('DJANGO_API_URL', 'http://localhost:8000/api/usercontrol/')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

class ContactForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text='–£—Å–ª—É–≥–∏')]],
    resize_keyboard=True
)

inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤ –ø–æ–¥ –∫–ª—é—á", callback_data="bot_development")],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞–Ω–∏–µ Mini Apps (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ Telegram)", callback_data="mini_apps")],
        [InlineKeyboardButton(text="–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤", callback_data="bot_support")],
        [InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="consultation")]
    ]
)

async def log_user_activity(user_id, action):
    try:
        async with aiohttp.ClientSession() as session:
            data = {
                'user_id': user_id,
                'action': action
            }
            
            async with session.post(
                f"{DJANGO_API_URL}log_activity/",
                json=data,
                headers={'Content-Type': 'application/json'},
                timeout=aiohttp.ClientTimeout(total=5)
            ) as response:
                if response.status != 201:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

async def save_application_to_django(user_data):
    max_attempts = 3
    base_delay = 1.0
    
    for attempt in range(max_attempts):
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'tg_id': user_data['user_id'],
                    'name': user_data['name'],
                    'number_phone': user_data['phone'],
                    'service': user_data['service']
                }
                
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ Django API")
                
                async with session.post(
                    f"{DJANGO_API_URL}create_or_update/",
                    json=data,
                    headers={'Content-Type': 'application/json'},
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    
                    if response.status == 200 or response.status == 201:
                        result = await response.json()
                        logger.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                        return True, result
                    else:
                        error_text = await response.text()
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {response.status} - {error_text}")
                        raise Exception(f"HTTP {response.status}: {error_text}")
                        
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            if attempt == max_attempts - 1:
                return False, str(e)
            
            delay = base_delay * (2 ** attempt)
            jitter = random.uniform(0, 0.1 * delay)
            total_delay = delay + jitter
            
            logger.info(f"–ñ–¥–µ–º {total_delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(total_delay)
    
    return False, "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã"

async def send_daily_report():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DJANGO_API_URL}daily_stats/") as response:
                if response.status == 200:
                    data = await response.json()
                    unique_users = data.get('unique_users_24h', 0)
                    
                    report_text = f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n\n–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—É—Ç–∫–∏ –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å {unique_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    
                    await bot.send_message(ADMIN_ID, report_text)
                    logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {unique_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await log_user_activity(user_id, "start")
    
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
                        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n"
                        "–ù–∞–∂–º–∏ ¬´–£—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
                        reply_markup=keyboard)

@dp.message()
async def handle_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    user_id = message.from_user.id
    
    if current_state == ContactForm.waiting_for_name:
        await state.update_data(name=message.text)
        await state.set_state(ContactForm.waiting_for_phone)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è: {message.text}")
        await log_user_activity(user_id, "entered_name")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        
    elif current_state == ContactForm.waiting_for_phone:
        user_data = await state.get_data()
        name = user_data.get('name')
        phone = message.text
        service = user_data.get('service')
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ñ–æ—Ä–º—É: {name}, {phone}, {service}")
        await log_user_activity(user_id, "completed_form")
        
        success, result = await save_application_to_django({
            'user_id': user_id,
            'name': name,
            'phone': phone,
            'service': service
        })
        
        if success:
            await message.answer(
                f"–°–ø–∞—Å–∏–±–æ, {name}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {phone} –ø–æ –ø–æ–≤–æ–¥—É —É—Å–ª—É–≥–∏: {service}",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=keyboard
            )
        
        await state.clear()
        
    elif message.text == "–£—Å–ª—É–≥–∏":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")
        await log_user_activity(user_id, "viewed_services")
        await message.answer("–í–æ—Ç –Ω–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n"
        "1Ô∏è‚É£–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤ –ø–æ–¥ –∫–ª—é—á\n"
        "‚Äì –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫, —Ä–∞—Å—Å—ã–ª–æ–∫, FAQ, –∫–≤–∏–∑–æ–≤\n"
        "‚Äì –í–æ—Ä–æ–Ω–∫–∏, —Ñ–æ—Ä–º—ã, CRM-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n"
        "2Ô∏è‚É£–°–æ–∑–¥–∞–Ω–∏–µ Mini Apps (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ Telegram)\n"
        "‚Äì –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏, —Ñ–æ—Ä–º–∞–º–∏, –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏\n"
        "‚Äì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API, –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö, –ø–ª–∞—Ç—ë–∂–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º\n\n"
        "3Ô∏è‚É£–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤\n"
        "‚Äì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π\n"
        "‚Äì –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n"
        "‚Äì –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
        "4Ô∏è‚É£–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚Äì –ü–æ–º–æ–∂–µ–º —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –æ—Ç –ê –¥–æ –Ø –ø–æ–¥ –≤–∞—à—É –∑–∞–¥–∞—á—É\n"
        "‚Äì –û—Ü–µ–Ω–∏–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å, —Å—Ä–æ–∫–∏, –ø–æ–¥—Å–∫–∞–∂–µ–º –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —É—Å–ª—É–≥ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üëá"
        , reply_markup=inline_kb)
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        await log_user_activity(user_id, "sent_message")
        await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

@dp.callback_query()
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    service_names = {
        "bot_development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤ –ø–æ–¥ –∫–ª—é—á",
        "mini_apps": "–°–æ–∑–¥–∞–Ω–∏–µ Mini Apps",
        "bot_support": "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤",
        "consultation": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    }
    
    service_name = service_names.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞")
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: {service_name}")
    await log_user_activity(user_id, f"selected_service_{callback.data}")
    
    await state.update_data(service=service_name)
    await state.set_state(ContactForm.waiting_for_name)
    
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    scheduler.add_job(
        send_daily_report,
        IntervalTrigger(minutes=1),
        id='minute_report',
        name='–ú–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç'
    )
    
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω - –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())









